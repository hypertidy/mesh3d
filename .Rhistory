install.packages("rgl")
rgl::mesh3d
rgl::as.mesh3d
library(silicate)
silicate::SC0(minimal_mesh)
x <-   silicate::SC0(minimal_mesh)
xyz <- silicate::sc_vertex(x)
xyz
do.call(rbind, x$object$topology_)
rgl::mesh3d(xyz, segments = t(as.matrix(do.call(rbind, x$object$topology_)[c(".vx0", ".vx1")]))
}
rgl::mesh3d(xyz, segments = t(as.matrix(do.call(rbind, x$object$topology_)[c(".vx0", ".vx1")])))
out <- rgl::mesh3d(xyz, segments = t(as.matrix(do.call(rbind, x$object$topology_)[c(".vx0", ".vx1")])))
plot3d(out)
library(rgl)
plot3d(out)
out$vb
devtools::load_all(".")
xyz <- canhasz(silicate::sc_vertex(x))
out <- rgl::mesh3d(xyz, segments = t(as.matrix(do.call(rbind, x$object$topology_)[c(".vx0", ".vx1")])))
plot3d(out)
devtools::load_all(".")
?mesh3d
library(mesh3d)
?anglr::asas.mesh3d
?anglr::as.mesh3d
devtools::load_all(".")
plot3d(as.mesh(x))
plot3d(as.mesh3(x))
plot3d(as.mesh3d(x))
x
mesh3d:::as.mesh3d.SC0(x)
plot3d(mesh3d:::as.mesh3d.SC0(x))
plot3d(mesh3d:::as.mesh3d.SC0(x), points_only = T)
plot3d(mesh3d:::as.mesh3d.SC0(x), points_only = T)
plot3d(mesh3d:::as.mesh3d.SC0(x, points_only = T))
?as.mesh3d
remotes::install_github("mdsumner/rgl@as.mesh3d-segments")
devtools::load_all(".")
devtools::load_all(".")
as.mesh3d(x)
devtools::load_all(".")
x
x <- SC0(minimal_mesh)
library(silicate)
x <- SC0(minimal_mesh)
x
as.mesh3d(x)
devtools::load_all(".")
library(rgl)
devtools::load_all(".")
as.mesh3d(x)
library(mesh3d)
as.mesh3d(x)
x
as.mesh3d.SC0(x)
devtools::load_all(".")
as.mesh3d.SC0(x)
devtools::load_all(".")
as.mesh3d.SC0(x)
plot3d(as.mesh3d.SC0(x))
plot3d(as.mesh3d.SC0(x, type = "points"))
library(anglr); anglr::cad_tas
aa <- copy_down(SC0(cad_tas), gebco)
plot3d(aa)
aspect3d(1, 1, 10)
aspect3d(1, 1, 1)
aspect3d(1, 1, 2)
aspect3d(1, 1, .1)
aa
as.mesh3d.SC0(aa)
as.mesh3d.SC(aa)
plot3d(as.mesh3d.SC(aa))
plot3d(as.mesh3d.SC(aa, type = "points"))
library(wrld_simpl)
data(wrld_simpl, package = "maptools")
xx <- copy_down(SC0(wrld_simpl), gebco)
plot3d(as.mesh3d.SC(xx, type = "points"))
open3d()
plot3d(as.mesh3d.SC(xx, type = "segments"))
plot3d(as.mesh3d.SC(xx, type = "segments"))
plot3d(as.mesh3d.SC0(nc, type = "segments"))
library(sf)
example(read_sf)
plot3d(as.mesh3d(nc, type = "segments"))
plot3d(as.mesh3d(SC0(nc), type = "segments"))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = "red")
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(2))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(3))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(4))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(14))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(5))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(56))
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments"), col = hcl.colors(56), lwd = 10)
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments", meshColor = "faces"), col = hcl.colors(56), lwd = 10)
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments", meshColor = "vertices"), col = hcl.colors(56), lwd = 10)
open3d()
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments", meshColor = "vertices"), col = hcl.colors(56), lwd = 10)
plot3d(as.mesh3d.SC0(SC0(nc), type = "segments", meshColor = "faces"), col = hcl.colors(56), lwd = 10)
usethis::use_package("rgl", min_version = "0.107.5")
library(mesh3d)
library(help = rgl)
remotes::install_github("dmurdoch/rgl")
